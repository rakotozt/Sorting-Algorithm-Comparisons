#BlueJ class context
comment0.target=QuickSorter
comment1.params=y
comment1.target=void\ sort(java.lang.Comparable[])
comment1.text=\n\ Calls\ qSort()\ on\ the\ array\ passed\ as\ an\ argument.\ Starts\ the\ recursive\ sorting\ process.\n\ \n\ @param\ y\ T[]\n
comment2.params=a\ low\ high
comment2.target=void\ qSort(java.lang.Comparable[],\ int,\ int)
comment2.text=\n\ Continues\ to\ recursively\ sort\ each\ smaller\ array\ as\ the\ original\ array\ gets\ smaller\n\ \n\ @param\ a\ T[]\n\ @param\ low\ int\n\ @param\ high\ int\n
comment3.params=A\ low\ high
comment3.target=int\ partition(java.lang.Comparable[],\ int,\ int)
comment3.text=\n\ Assigns\ the\ pivot\ value\ of\ the\ array\ being\ and\ returns\ the\ value\ partitioned\ at\n\ \n\ @param\ a\ T[]\n\ @param\ low\ int\n\ @param\ high\ int\n
comment4.params=a\ x\ y
comment4.target=void\ swap(java.lang.Comparable[],\ int,\ int)
comment4.text=\n\ Accepts\ an\ array\ and\ two\ values.\ Swaps\ them\ in\ the\ array.\n\ \n\ @param\ a\ T[]\n\ @param\ x\ int\n\ @param\ y\ int\n
comment5.params=a\ x\ y
comment5.target=java.lang.Comparable[]\ swapReturn(java.lang.Comparable[],\ int,\ int)
comment5.text=\n\ This\ is\ a\ copy\ of\ the\ method\ above\ to\ be\ used\ by\ the\ unit\ tests.\n\ Returns\ the\ array\ after\ the\ swap\ so\ the\ unit\ test\ can\ see\ if\ it\ was\ correct.\n
comment6.params=A\ low\ high
comment6.target=java.lang.Comparable\ getPivot(java.lang.Comparable[],\ int,\ int)
numComments=7
