#BlueJ class context
comment0.target=QuickSorter
comment0.text=\r\n\ Quick\ Sort\ Interface\ \ \r\n\r\n\ @author\ Tafita\ Rakotozandry\ &\ Khalid\ Al-Motaery\r\n\ @version1\r\n
comment1.params=a
comment1.target=void\ sort(java.lang.Comparable[])
comment1.text=\r\n\ Calls\ qSort()\ on\ the\ array\ passed\ as\ an\ argument.\ Starts\ the\ recursive\ sorting\ process.\r\n\ \r\n\ @param\ y\ T[]\r\n
comment10.params=a\ x\ y
comment10.target=void\ swap(int[],\ int,\ int)
comment10.text=\r\n\ Accepts\ an\ array\ and\ two\ values.\ Swaps\ them\ in\ the\ array.\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ x\ int\r\n\ @param\ y\ int\r\n
comment11.params=A\ low\ high
comment11.target=int\ getPivot(int[],\ int,\ int)
comment12.params=a\ low\ high\ c
comment12.target=void\ qSort(java.lang.Object[],\ int,\ int,\ java.util.Comparator)
comment12.text=\r\n\ Continues\ to\ recursively\ sort\ each\ smaller\ array\ as\ the\ original\ array\ gets\ smaller\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ low\ int\r\n\ @param\ high\ int\r\n
comment13.params=A\ low\ high\ c
comment13.target=int\ partition(java.lang.Object[],\ int,\ int,\ java.util.Comparator)
comment13.text=\r\n\ Assigns\ the\ pivot\ value\ of\ the\ array\ being\ and\ returns\ the\ value\ partitioned\ at\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ low\ int\r\n\ @param\ high\ int\r\n
comment14.params=a\ x\ y
comment14.target=void\ swap(java.lang.Object[],\ int,\ int)
comment14.text=\r\n\ Accepts\ an\ array\ and\ two\ values.\ Swaps\ them\ in\ the\ array.\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ x\ int\r\n\ @param\ y\ int\r\n
comment15.params=A\ low\ high\ c
comment15.target=java.lang.Object\ getPivot(java.lang.Object[],\ int,\ int,\ java.util.Comparator)
comment2.params=a
comment2.target=void\ sort(int[])
comment2.text=\r\n\ Sort\ an\ array\ of\ ints.\ \r\n\r\n\ @param\ \ a\ \ an\ array\ of\ ints\r\n
comment3.params=a\ c
comment3.target=void\ sort(java.lang.Object[],\ java.util.Comparator)
comment3.text=\r\n\ Sort\ an\ array\ of\ objects\ using\ comparator.\ \r\n\r\n\ @param\ \ a\ \ an\ array\ of\ objects\r\n\ @param\ \ c\ \ a\ comparator\ object\r\n
comment4.params=a\ low\ high
comment4.target=void\ qSort(java.lang.Comparable[],\ int,\ int)
comment4.text=\r\n\ Continues\ to\ recursively\ sort\ each\ smaller\ array\ as\ the\ original\ array\ gets\ smaller\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ low\ int\r\n\ @param\ high\ int\r\n
comment5.params=A\ low\ high
comment5.target=int\ partition(java.lang.Comparable[],\ int,\ int)
comment5.text=\r\n\ Assigns\ the\ pivot\ value\ of\ the\ array\ being\ and\ returns\ the\ value\ partitioned\ at\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ low\ int\r\n\ @param\ high\ int\r\n
comment6.params=a\ x\ y
comment6.target=void\ swap(java.lang.Comparable[],\ int,\ int)
comment6.text=\r\n\ Accepts\ an\ array\ and\ two\ values.\ Swaps\ them\ in\ the\ array.\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ x\ int\r\n\ @param\ y\ int\r\n
comment7.params=A\ low\ high
comment7.target=java.lang.Comparable\ getPivot(java.lang.Comparable[],\ int,\ int)
comment8.params=a\ low\ high
comment8.target=void\ qSort(int[],\ int,\ int)
comment8.text=\r\n\ Continues\ to\ recursively\ sort\ each\ smaller\ array\ as\ the\ original\ array\ gets\ smaller\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ low\ int\r\n\ @param\ high\ int\r\n
comment9.params=A\ low\ high
comment9.target=int\ partition(int[],\ int,\ int)
comment9.text=\r\n\ Assigns\ the\ pivot\ value\ of\ the\ array\ being\ and\ returns\ the\ value\ partitioned\ at\r\n\ \r\n\ @param\ a\ T[]\r\n\ @param\ low\ int\r\n\ @param\ high\ int\r\n
numComments=16
